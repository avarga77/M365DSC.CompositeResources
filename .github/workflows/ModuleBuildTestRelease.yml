name: Module Build, Test and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - CHANGELOG.md
    tags:
      - v*
    #tags-ignore:
    #- '*-*'
  pull_request:

env:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  defaultBranch: main
  Agent.Source.Git.ShallowFetchDepth: 0

jobs:
  Build_Stage_Package_Module:
    name: Package Module
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Calculate ModuleVersion (GitVersion)
        id: GitVersion
        run: |
          $m365dscModule = Find-Module Microsoft365DSC
          $m365dscCRModule = Find-Module M365DSC.CompositeResources -ErrorAction SilentlyContinue
          if ($m365dscModule.Version -gt $m365dscCRModule.Version)
          {
            Write-Output "Version of Microsoft365DSC is newer than M365DSC.CompositeResources. Installing Microsoft365DSC and generating new module."
            Write-Output "Microsoft365DSC: v$($m365dscModule.Version) / M365DSC.CompositeResources: v$($m365dscCRModule.Version)"
            Install-Module Microsoft365DSC -Confirm:$false -Force
            Write-Output "ModuleVersion=$($m365dscModule.Version.ToString())" >> $env:GITHUB_OUTPUT
          }
          else
          {
            Write-Output "No new version of Microsoft365DSC found. Skipping build."
            exit 1
          }
        shell: powershell
      - name: Build & Package Module
        shell: powershell
        run: './build.ps1 -ResolveDependency -Tasks Build' # Pack' -> Changed from Pack to Build. Pack does not work with nested required modules.
        env:
          ModuleVersion: ${{ steps.GitVersion.outputs.ModuleVersion }}
      - name: Publish Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}/

  Test_Stage_test_windows_ps:
    name: Windows (Windows PowerShell)
    runs-on: windows-latest
    needs:
      - Build_Stage_Package_Module
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}/
      - name: Run Tests
        shell: powershell
        run: './build.ps1 -Tasks Test'
      - name: Publish Test Artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/
          name: CodeCoverageWinPS51

  # Test_Stage_Code_Coverage:
  #   name: Publish Code Coverage
  #   runs-on: ubuntu-latest
  #   needs:
  #     - Build_Stage_Package_Module
  #     - Test_Stage_test_windows_ps
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set Environment Variables
  #       run: |
  #         $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'
  #         echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
  #         echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
  #       shell: pwsh
  #     - name: Download Pipeline Artifact
  #       uses: actions/download-artifact@v2
  #     - name: Download Test Artifact Windows (PS 5.1)
  #       uses: actions/download-artifact@v2

  Deploy_Stage_Deploy_Module:
    name: Deploy Module
    runs-on: ubuntu-latest
    needs:
      - Test_Stage_test_windows_ps
      #- Test_Stage_Code_Coverage
    if: (success() && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')) && (contains(github.repository_owner, 'ykuijs')))
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}/
      - name: Publish Release
        shell: pwsh
        run: |
          Get-ChildItem
          ./build.ps1 -Tasks Publish
        env:
          GitHubToken: ${{ secrets.GITHUB_TOKEN }}
          GalleryApiToken: ${{ secrets.GalleryApiToken }}
          ReleaseBranch: ${{ env.defaultBranch }}
          MainGitBranch: ${{ env.defaultBranch }}
      - name: Send Changelog PR
        shell: pwsh
        run: './build.ps1 -Tasks Create_ChangeLog_GitHub_PR'
        env:
          GitHubToken: ${{ secrets.GITHUB_TOKEN }}
          ReleaseBranch: ${{ env.defaultBranch }}
          MainGitBranch: ${{ env.defaultBranch }}
